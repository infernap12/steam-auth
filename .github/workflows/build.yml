name: Build Binaries

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: steam-auth
            asset_name: steam-auth-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: steam-auth.exe
            asset_name: steam-auth-windows-x86_64.exe

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build (Linux)
      if: matrix.target == 'x86_64-unknown-linux-gnu'
      run: RUSTFLAGS="-C link-arg=-Wl,-rpath,\$ORIGIN" cargo build --release --target ${{ matrix.target }}

    - name: Build (Windows)
      if: matrix.target == 'x86_64-pc-windows-msvc'
      run: cargo build --release --target ${{ matrix.target }}

    - name: Test
      run: cargo test --target ${{ matrix.target }}

    - name: Prepare artifact directory
      run: |
        mkdir -p artifact
        cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} artifact/
        
    - name: Bundle Steam library (Linux)
      if: matrix.target == 'x86_64-unknown-linux-gnu'
      run: |
        find ~/.cargo/registry/src -path "*/steamworks-sys-*/lib/steam/redistributable_bin/linux64/libsteam_api.so" -exec cp {} artifact/ \;
        
    - name: Bundle Steam library (Windows)  
      if: matrix.target == 'x86_64-pc-windows-msvc'
      run: |
        Get-ChildItem -Path "$env:USERPROFILE\.cargo\registry\src" -Filter "steam_api64.dll" -Recurse | Where-Object { $_.FullName -like "*steamworks-sys-*\lib\steam\redistributable_bin\win64\*" } | ForEach-Object { Copy-Item $_.FullName "artifact\" }

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: artifact/*

    - name: Create release archive (Linux)
      if: matrix.target == 'x86_64-unknown-linux-gnu' && github.event_name == 'release'
      run: |
        cd artifact
        tar -czf ../${{ matrix.asset_name }}.tar.gz *
        cd ..

    - name: Create release archive (Windows)
      if: matrix.target == 'x86_64-pc-windows-msvc' && github.event_name == 'release'
      run: |
        Compress-Archive -Path artifact\* -DestinationPath ${{ matrix.asset_name }}.zip

    - name: Upload to release (Linux)
      if: matrix.target == 'x86_64-unknown-linux-gnu' && github.event_name == 'release'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release upload ${{ github.event.release.tag_name }} \
          ${{ matrix.asset_name }}.tar.gz \
          --clobber

    - name: Upload to release (Windows)
      if: matrix.target == 'x86_64-pc-windows-msvc' && github.event_name == 'release'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release upload ${{ github.event.release.tag_name }} `
          ${{ matrix.asset_name }}.zip `
          --clobber